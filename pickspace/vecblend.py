# PickProject
"""Vector blending, including a hard-coded LUT for fast,
accurate vector blends."""

from math import pi, acos, modf, sqrt, sin, cos
from random import gauss, randint, random
from itertools import izip, imap
import operator

from ext.matlib import matiden, matprod, transpose, matvec

# These should be even
SDIST_LUT_SIZE = 24
BLEND_LUT_SIZE = 24
DIMENSIONS = 24
__lut = [[0.040093128527755373, 0.080162938645167769, 0.12021147383171883, 0.16024077324835712, 0.20025287215438414, 0.24024980232265114, 0.28023359245322904, 0.3202062685858581, 0.36016985451100342, 0.40012637218032227, 0.44007784211597045, 0.48002628381955675, 0.51997371618043264, 0.55992215788400956, 0.59987362781964504, 0.63983014548897921, 0.67979373141413824, 0.71976640754674681, 0.75975019767734064, 0.79974712784561552, 0.83975922675165271, 0.87978852616826131, 0.91983706135482957, 0.95990687147225573], [0.040374311876564574, 0.080654460485570942, 0.12084888960597208, 0.16096597252815611, 0.20101401913173156, 0.2410012828522908, 0.28093596754972899, 0.32082623429032664, 0.36068020805467277, 0.40050598438315232, 0.44031163597062534, 0.48010521922175087, 0.51989478077824069, 0.55968836402936983, 0.5994940156168499, 0.63931979194533084, 0.67917376570967702, 0.71906403245026884, 0.75899871714771427, 0.79898598086827233, 0.83903402747184042, 0.87915111039402627, 0.91934553951442799, 0.9596256881234323], [0.040849021274550389, 0.081482782633019321, 0.1219213224983067, 0.16218431037958764, 0.20229108629111042, 0.2422606988422801, 0.28211194216214541, 0.32186339181337592, 0.36153343984388764, 0.40114032911835207, 0.44070218706702352, 0.48023705898532104, 0.51976294101467668, 0.55929781293297409, 0.59885967088164693, 0.63846656015611347, 0.67813660818662302, 0.71788805783785448, 0.75773930115771881, 0.79770891370888519, 0.83781568962040887, 0.87807867750169222, 0.918517217366979, 0.95915097872544874], [0.041526641346246784, 0.082661938161123744, 0.12344421064951784, 0.16391055747914715, 0.20409699726428857, 0.24403860205167666, 0.28376962389665267, 0.32332361552974265, 0.36273354603982433, 0.40203191243844477, 0.44125084791963204, 0.48042222758960079, 0.51957777241039893, 0.55874915208036691, 0.59796808756155462, 0.63726645396017623, 0.67667638447025757, 0.71623037610334783, 0.75596139794832296, 0.79590300273571268, 0.83608944252085204, 0.87655578935048062, 0.91733806183887712, 0.95847335865375349], [0.042420891244979365, 0.084212306601028727, 0.12543984256517879, 0.1661659291675025, 0.20645023304184781, 0.24635002718367813, 0.28592053248089594, 0.32521523551878129, 0.36428618668035095, 0.4031842821732915, 0.44195953330226528, 0.48066132606136092, 0.5193386739386382, 0.55804046669773466, 0.59681571782670817, 0.63571381331964916, 0.67478476448121849, 0.71407946751910367, 0.7536499728163224, 0.79354976695815227, 0.83383407083249705, 0.87456015743482096, 0.9157876933989717, 0.95757910875501873], [0.043550461718102555, 0.086161406565764181, 0.1279380773614123, 0.16897865118068917, 0.20937523717976214, 0.24921476375512355, 0.28857977411731756, 0.32754914648771966, 0.36619875284430548, 0.40460206833589885, 0.44283074207180956, 0.4809551389122671, 0.51904486108773351, 0.55716925792819061, 0.59539793166410049, 0.63380124715569441, 0.67245085351228029, 0.71142022588268128, 0.75078523624487614, 0.79062476282023786, 0.83102134881931078, 0.87206192263858839, 0.91383859343423557, 0.95644953828189783], [0.044939923039578673, 0.08854500692075519, 0.13097733976535883, 0.17238473128613044, 0.21290296261216288, 0.25265771990681868, 0.29176627342489242, 0.33033895218054948, 0.36848045558020781, 0.40629103661495303, 0.44386758606530241, 0.48130464332565542, 0.51869535667434441, 0.55613241393469703, 0.59370896338504653, 0.63151954441979241, 0.66966104781945057, 0.70823372657510741, 0.74734228009318127, 0.78709703738783698, 0.82761526871386959, 0.86902266023464092, 0.91145499307924416, 0.95506007696042095], [0.046620986727124725, 0.091408639476641476, 0.13460595008744117, 0.17642897441432465, 0.21707158150181483, 0.25670938977874902, 0.29550306923155911, 0.3336011487702466, 0.37114243865999591, 0.40825815618853772, 0.44507382674115525, 0.48171102080650691, 0.51828897919349315, 0.55492617325884452, 0.59174184381146211, 0.62885756134000381, 0.66639885122975351, 0.70449693076844122, 0.74329061022125076, 0.78292841849818517, 0.82357102558567563, 0.86539404991255908, 0.90859136052335854, 0.95337901327287433], [0.0486342445162532, 0.094809632906524527, 0.13888387358929882, 0.18116629268262621, 0.22192738682086832, 0.26140643976397931, 0.29981768238281725, 0.33735535177362291, 0.37419791782911666, 0.41051168345944189, 0.44645392043432774, 0.48217567157193703, 0.5178243284280627, 0.55354607956567192, 0.58948831654055855, 0.62580208217088362, 0.66264464822637714, 0.70018231761718308, 0.73859356023602063, 0.77807261317913146, 0.8188337073173737, 0.86111612641070079, 0.90519036709347489, 0.95136575548374669], [0.051031568892388843, 0.098819840007562554, 0.14388500662420367, 0.18666337968608954, 0.22752592344133243, 0.26679243342545667, 0.30474256598863225, 0.34162457225094789, 0.37766234993962011, 0.41306126374120794, 0.44801307332843482, 0.48270023203391743, 0.51729976796608224, 0.55198692667156535, 0.58693873625879189, 0.62233765006038011, 0.65837542774905211, 0.69525743401136775, 0.73320756657454322, 0.77247407655866795, 0.81333662031391041, 0.85611499337579611, 0.90118015999243706, 0.94896843110761175], [0.0538794534113003, 0.10352930719792622, 0.1497001628404728, 0.19300084234254547, 0.23393339810817354, 0.27291872037391274, 0.31031565125262633, 0.34643554951251448, 0.38155363620510796, 0.41591805343496585, 0.44975730752564075, 0.48328659581453487, 0.51671340418546519, 0.55024269247435942, 0.5840819465650342, 0.61844636379489171, 0.65356445048748546, 0.68968434874737383, 0.72708127962608704, 0.76606660189182629, 0.80699915765745467, 0.85029983715952728, 0.89647069280207337, 0.94612054658869871], [0.057263720109788752, 0.10905125021533019, 0.1564409879995784, 0.20027591594486061, 0.24122843269303249, 0.2798455213051671, 0.31658100535644979, 0.35181914932202329, 0.38589236484594902, 0.41909486585436256, 0.45169353993105926, 0.48393693884123951, 0.51606306115876033, 0.54830646006894079, 0.5809051341456376, 0.61410763515405076, 0.64818085067797682, 0.68341899464355038, 0.72015447869483296, 0.75877156730696782, 0.79972408405513917, 0.84355901200042116, 0.8909487497846702, 0.94273627989021125], [0.061296264612488924, 0.11552887641482329, 0.16424512645449296, 0.20860593256478957, 0.24950424486063277, 0.28764325013452863, 0.3235896219911909, 0.35781083875207553, 0.39070209965178421, 0.42260634461070951, 0.45382967607910041, 0.48465374920052356, 0.51534625079947605, 0.5461703239208997, 0.57739365538929044, 0.60929790034821607, 0.64218916124792425, 0.67641037800880921, 0.71235674986547071, 0.75049575513936695, 0.79139406743521012, 0.83575487354550704, 0.88447112358517599, 0.93870373538751062], [0.066124918762336296, 0.12314487095365842, 0.17328310167955543, 0.21813277500981124, 0.25887136651077264, 0.29639412535124676, 0.3314003702753972, 0.36445125152674523, 0.39600972254292971, 0.42646916940284679, 0.4561747215367018, 0.48543986259035293, 0.51456013740964712, 0.54382527846329798, 0.57353083059715304, 0.60399027745707012, 0.63554874847325515, 0.66859962972460263, 0.70360587464875335, 0.74112863348922797, 0.78186722499018857, 0.82671689832044437, 0.87685512904634133, 0.93387508123766416], [0.07194822217122808, 0.13213480971639868, 0.18376758265161958, 0.22902863634809642, 0.26946104562064416, 0.30619413716754362, 0.34008113429012066, 0.3717868610322958, 0.40184584015000219, 0.43070230021865413, 0.45873891415114187, 0.48629850441352201, 0.51370149558647804, 0.54126108584885857, 0.56929769978134559, 0.59815415984999776, 0.62821313896770414, 0.65991886570987945, 0.69380586283245649, 0.7305389543793559, 0.77097136365190366, 0.81623241734838026, 0.86786519028360187, 0.92805177782877246], [0.079038178721740043, 0.14280649880657645, 0.19596602898075116, 0.24150353112918838, 0.2814295250423961, 0.31715545587569205, 0.34971018371336166, 0.37987078239044841, 0.40824526686698986, 0.43532726741663652, 0.46153388120583611, 0.48723333980793387, 0.5127666601920664, 0.53846611879416384, 0.56467273258336337, 0.5917547331330103, 0.62012921760955131, 0.65028981628663785, 0.68284454412430784, 0.71857047495760384, 0.75849646887081157, 0.80403397101924912, 0.85719350119342352, 0.92096182127825976], [0.087776495162455503, 0.15556849733732694, 0.21021821092870532, 0.25581518838490924, 0.29496345769651428, 0.32940939159909893, 0.36037782660995749, 0.38876373033622175, 0.41524759991993537, 0.44036851700839258, 0.46457282655616283, 0.4882485332315617, 0.51175146676843819, 0.53542717344383683, 0.55963148299160725, 0.58475240008006457, 0.61123626966377842, 0.63962217339004224, 0.67059060840090079, 0.70503654230348578, 0.74418481161509042, 0.78978178907129415, 0.84443150266267231, 0.91222350483754444], [0.098714595509396597, 0.17097329936188466, 0.22696090834923482, 0.27228222934052093, 0.31028680922998603, 0.34311004848320503, 0.3721884090866367, 0.39853516648281967, 0.42289790593641169, 0.44585382282927438, 0.46787075410606216, 0.48934881963099142, 0.51065118036900847, 0.53212924589393773, 0.55414617717072545, 0.57710209406358781, 0.60146483351718039, 0.6278115909133638, 0.65688995151679463, 0.6897131907700137, 0.72771777065947885, 0.77303909165076456, 0.8290267006381159, 0.90128540449060213], [0.11267778335393155, 0.18978472646570987, 0.2467634246995547, 0.29130194483082189, 0.32766972821016965, 0.35843886034904754, 0.38526274429041496, 0.40926467837476255, 0.43124754357757034, 0.45181478033175521, 0.47144473564576406, 0.49053958975188472, 0.50946041024811528, 0.52855526435423572, 0.54818521966824441, 0.56875245642242966, 0.59073532162523756, 0.61473725570958515, 0.64156113965095229, 0.67233027178982985, 0.7086980551691775, 0.75323657530044552, 0.81021527353428935, 0.88732221664606969], [0.13095664721625397, 0.21308691705073429, 0.27037981556747515, 0.31337462215351952, 0.3474400479330344, 0.37561025423348782, 0.39974107653648638, 0.42104364419071105, 0.44035515338364706, 0.45828740069172574, 0.47531423322554034, 0.4918269928370938, 0.50817300716290614, 0.52468576677445977, 0.5417125993082742, 0.55964484661635272, 0.57895635580928917, 0.60025892346351395, 0.62438974576651229, 0.65255995206696604, 0.6866253778464807, 0.72962018443252497, 0.78691308294926543, 0.869043352783747], [0.15568465299369419, 0.24246818223130803, 0.29882770909537759, 0.33913737033980468, 0.36999835010002069, 0.39487876925478482, 0.41578671717947485, 0.4339772519741491, 0.45028785460779452, 0.46531282909587435, 0.4795014890608702, 0.49321806085799602, 0.50678193914200398, 0.5204985109391298, 0.53468717090412554, 0.54971214539220559, 0.56602274802585073, 0.58421328282052498, 0.60512123074521473, 0.63000164989997953, 0.66086262966019504, 0.7011722909046223, 0.75753181776869272, 0.84431534700630506], [0.19065386784380139, 0.2803473027937991, 0.33351086299682975, 0.36941200432397481, 0.39583791153466485, 0.41654806986840198, 0.43359052996874653, 0.44818696211769538, 0.46112270019934792, 0.47293821791560892, 0.48403199968904581, 0.49472085961295853, 0.50527914038704158, 0.51596800031095424, 0.52706178208439136, 0.5388772998006518, 0.55181303788230496, 0.56640947003125364, 0.58345193013159835, 0.60416208846533503, 0.63058799567602608, 0.6664891370031697, 0.71965269720620106, 0.80934613215619955], [0.2433036712504133, 0.33058981006559696, 0.37641648532052907, 0.40527421834578187, 0.42557143876447456, 0.44098244805840286, 0.45337649899629912, 0.46381352829934724, 0.47294845626957377, 0.48121779458455927, 0.48893509606105956, 0.49634467361054335, 0.50365532638945654, 0.51106490393894044, 0.51878220541544062, 0.52705154373042606, 0.5361864717006527, 0.54662350100370083, 0.55901755194159686, 0.57442856123552521, 0.59472578165421863, 0.62358351467947082, 0.66941018993440193, 0.7566963287495847], [0.33046957978893815, 0.39976667947698608, 0.43044628305750338, 0.44815583822248134, 0.45996738253707825, 0.46862162809109642, 0.47540868760727439, 0.48102072772008575, 0.4858677927867695, 0.49021417625765157, 0.49424465793253614, 0.49810023378632012, 0.50189976621367982, 0.50575534206746409, 0.50978582374234838, 0.51413220721323027, 0.51897927227991447, 0.52459131239272572, 0.53137837190890325, 0.54003261746292319, 0.55184416177752016, 0.5695537169424959, 0.6002333205230127, 0.66953042021105502]]

# The arguments below are a recommended optimisation from
# the itertools documentation.
def dot(a, b, sum=sum, imap=imap, mul=operator.mul):
    return sum(imap(mul, a, b))

def mix(a, b, blend):
    return b * blend + a * (1 - blend)

def line_intersect(p1, p2, p3, p4):
    '''Ported from C from Paul Bourke:
    http://paulbourke.net/geometry/lineline3d/
    And made to work in n dimensions.
    Calculate the line segment PaPb that is the shortest route between
    two lines P1P2 and P3P4. Calculate also the values of mua and mub where
       Pa = P1 + mua (P2 - P1)
       Pb = P3 + mub (P4 - P3)
    Returns Pa, Pb
    '''
    p13 = [a - b for a, b in izip(p1, p3)]
    p43 = [a - b for a, b in izip(p4, p3)]
    p21 = [a - b for a, b in izip(p2, p1)]
    # Dot products
    d1343 = sum(a * b for a, b in izip(p13, p43))
    d4321 = sum(a * b for a, b in izip(p43, p21))
    d1321 = sum(a * b for a, b in izip(p13, p21))
    d4343 = sum(a * b for a, b in izip(p43, p43))
    d2121 = sum(a * b for a, b in izip(p21, p21))
    denom = d2121 * d4343 - d4321 * d4321
    numer = d1343 * d4321 - d1321 * d4343
    mua = numer / denom
    return mua
    # This is all we need
    #mub = (d1343 + d4321 * mua) / d4343
    #pa = [a + b * mua for a, b in izip(p1, p21)]
    #pb = [a + b * mub for a, b in izip(p3, p43)]
    #return pa, pb, mua, mub

def __build_fast_vecblend_lut(dim=DIMENSIONS):
    '''Generates a 2D look-up table of errors between the slow but accurate
    vecblend function and the fast inaccurate version. The error stored
    is a delta that should be applied to the blend parameter to get a (much
    more) correct result from the fast blend. The LUT takes two keys: the
    sdistance between the two vectors (acos(dot(v1,v2)) / pi) and the
    original blend parameter.'''
    rows, cols = SDIST_LUT_SIZE, BLEND_LUT_SIZE
    lut = [] # [[0.0] + list(x / float(cols) for x in xrange(1, cols))]
    for dist in (x / float(rows + 1) for x in xrange(1, rows + 1)):
        result = [] # [dist]
        for incr in (x / float(cols + 1) for x in xrange(1, cols + 1)):
            v1 = random_unit_vector(dim)
            v2 = vecblend(v1, [-x for x in v1], dist, method='rotate')
            rr = vecblend(v1, v2, incr, method='rotate')
            #mr = vecblend(v1, v2, incr, method='mix')
            # Find the point along the line directly between the two vectors
            # where it itersects the CORRECT blended result. 
            mua = line_intersect(v1, v2, [0] * dim, rr)
            # This mua value is actually the blend we want!
            result.append(mua)
        lut.append(result)
    return lut

def get_lut(dim=DIMENSIONS):
    global __lut
    if dim == DIMENSIONS:
        return __lut
    else: # Make a new lut
        __lut = __build_fast_vecblend_lut(dim)
        return __lut

def fix_blend(dp, blend):
    '''Given a dot product and blend factor, returns a new blend factor that
    will correct the error in "mix" blends and give a result closer to "rotate"
    blends. Returns None if the distance is too great for an accurate mix and
    the caller should fall back on using a "rotate" blend.'''
    sdistance = acos(dp) / pi
    # The LUT doesn't store values at the extreme ends
    sdistr, sdisti = modf(sdistance * (SDIST_LUT_SIZE + 1))
    sdisti = int(sdisti) - 1
    if sdisti >= SDIST_LUT_SIZE - 1:
        return None # Caller must make alternative arrangements
    blendr, blendi = modf(blend * (BLEND_LUT_SIZE + 1))
    blendi = int(blendi) - 1
    global __lut
    if sdisti < 0: # Below the LUT, first "point" = 0
        aa, ba = 0.0, 0.0
    else:
        if blendi < 0:
            aa = 0.0
            ba = __lut[sdisti][blendi + 1]
        else:
            aa = __lut[sdisti][blendi]
            if blendi >= BLEND_LUT_SIZE - 1:
                ba = 1.0
            else:
                ba = __lut[sdisti][blendi + 1]
    # Now the upper corners
    if blendi < 0:
        ab = 0.0
        bb = __lut[sdisti + 1][blendi + 1]
    else:
        ab = __lut[sdisti + 1][blendi]
        if blendi >= BLEND_LUT_SIZE - 1:
            bb = 1.0
        else:
            bb = __lut[sdisti + 1][blendi + 1]
    a = aa * (1.0 - blendr) + ba * blendr
    b = ab * (1.0 - blendr) + bb * blendr
    r = a * (1.0 - sdistr) + b * sdistr
    return r

def random_unit_vector(dim=DIMENSIONS):
    '''Generates a uniform random vector on the unit (dim-1)-sphere.'''
    vector = [gauss(0, 1) for _ in range(dim)]
    length = sqrt(sum(i * i for i in vector))
    return [i / length for i in vector]

_random_vectors = {}
def pregenerated_random_unit_vector(dim=DIMENSIONS):
    '''A faster version of random_unit_vector() if you don't mind getting
    repeats. Requires an large first-call cost to pregenerate the vectors.'''
    POOL_SIZE = 1000
    global _random_vectors
    index = randint(0, POOL_SIZE - 1)
    try:
        return index, _random_vectors[dim][index]
    except KeyError:
        _random_vectors[dim] = [random_unit_vector(dim)
                                for _ in xrange(POOL_SIZE)]
        return index, _random_vectors[dim][index]

def vecblend(v1, v2, blend, method='lut'):
    '''
    Rotates the first vector around the sphere toward the second vector,
    but only by a factor of "blend". Uses the shortest rotation path. 
    Vectors must be unit length.
    Method can be 'rotate' (precise/slow)
                  'lut' (reasonably precise/fast) <- ideal
                  'mix' (imprecise/fast)
    Refs:
    http://forums.xkcd.com/viewtopic.php?f=17&t=29603#p2113709
    http://en.wikipedia.org/wiki/QR_decomposition
    '''
    if blend == 0:
        return v1
    elif blend == 1:
        return v2
    dim = len(v1)
    dp = max(-1, min(dot(v1, v2), 1))
    if dp == 1: # Identical
        return v1 # Identical
    elif dp < -.999999: # Opposite, this can cause trouble
        rv = random_unit_vector(dim)
        dp2 = dot(v1, rv)
        # Find a vector orthonormal to v1
        on = [a - b * dp2 for a, b in izip(rv, v1)]
        if blend < .5:
            return vecblend(v1, on, blend * 2)
        else:
            return vecblend(v2, on, 1 - (blend * 2 - 1))
    if method is 'lut':
        # Use the LUT to get a new blend that will give the correct mixed result
        newblend = fix_blend(dp, blend)
        if newblend is not None: # LUT no good, fall back on rotate
            blend, method = newblend, 'mix'
    if method is 'mix':
        # Quick blend
        x = [a * (1. - blend) + b * blend for a, b in izip(v1, v2)]
        xl = sqrt(sum(a * a for a in x))
        return [a / xl for a in x]
    # else slow version
    e2 = [i - j * dp for i, j in izip(v2, v1)]
    # Rotation into a space
    # Using QR decomposition
    Q = []
    used_vectors = set()
    for i in xrange(dim):
        if i == 0:
            vi = v1
        elif i == 1:
            vi = e2
        else:
            # Generate a random vector on the unit sphere
            # Make sure we haven't already used it
            pi, vi = pregenerated_random_unit_vector(dim)
            while pi in used_vectors:
                pi, vi = pregenerated_random_unit_vector(dim)
            used_vectors.add(pi)
        for j in xrange(i):
            vj = Q[j]
            dp2 = dot(vi, vj)
            vi = [a - b * dp2 for a, b in izip(vi, vj)]
        # Normalize and add the row
        vl = sqrt(sum(k * k for k in vi))
        Q.append([k / vl for k in vi])
    Q = transpose(Q)
    # The rotation matrix
    angle = acos(dp) * blend
    ca, sa = cos(angle), sin(angle)
    U = matiden(dim, dim)
    U[0][0:2] = [ca, -sa]
    U[1][0:2] = [sa, ca]
    M = matprod(matprod(Q, U), transpose(Q))
    return matvec(M, v1)

def test_lut_accuracy():
    testn = 1000
    r = 0.0
    for _ in xrange(testn):
        v1 = random_unit_vector()
        v2 = random_unit_vector()
        blend = random()
        rr = vecblend(v1, v2, blend, 'rotate')
        rl = vecblend(v1, v2, blend, 'lut')
        r += dot(rl, rr)
    r /= testn
    return r


if __name__ == "__main__":
    print test_lut_accuracy()
    #print '%r' % __build_fast_vecblend_lut()
